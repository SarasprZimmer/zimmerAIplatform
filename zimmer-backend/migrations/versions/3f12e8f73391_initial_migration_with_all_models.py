"""Initial migration with all models

Revision ID: 3f12e8f73391
Revises: 
Create Date: 2025-09-04 15:52:13.149368

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '3f12e8f73391'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('automations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('pricing_type', sa.Enum('token_per_session', 'token_per_step', 'flat_fee', name='pricingtype'), nullable=False),
    sa.Column('price_per_token', sa.Float(), nullable=False),
    sa.Column('status', sa.Boolean(), nullable=False),
    sa.Column('api_endpoint', sa.String(), nullable=True),
    sa.Column('api_base_url', sa.String(), nullable=True),
    sa.Column('api_provision_url', sa.String(), nullable=True),
    sa.Column('api_usage_url', sa.String(), nullable=True),
    sa.Column('api_kb_status_url', sa.String(), nullable=True),
    sa.Column('api_kb_reset_url', sa.String(), nullable=True),
    sa.Column('service_token_hash', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('health_check_url', sa.String(length=500), nullable=True),
    sa.Column('health_status', sa.String(length=16), nullable=False),
    sa.Column('last_health_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('health_details', sa.JSON(), nullable=True),
    sa.Column('is_listed', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_automations'))
    )
    with op.batch_alter_table('automations', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_automations_health_status'), ['health_status'], unique=False)
        batch_op.create_index(batch_op.f('ix_automations_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_automations_is_listed'), ['is_listed'], unique=False)

    op.create_table('backup_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('backup_date', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('file_name', sa.String(), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('success', 'failed', name='backupstatus'), nullable=False),
    sa.Column('storage_location', sa.String(), nullable=False),
    sa.Column('verified', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_backup_logs'))
    )
    with op.batch_alter_table('backup_logs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_backup_logs_id'), ['id'], unique=False)

    op.create_table('discount_codes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('code', sa.String(length=64), nullable=False),
    sa.Column('percent_off', sa.Integer(), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.Column('starts_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('ends_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('max_redemptions', sa.Integer(), nullable=True),
    sa.Column('per_user_limit', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint('percent_off >= 0 AND percent_off <= 100', name=op.f('ck_discount_codes_ck_discount_percent_range')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_discount_codes'))
    )
    with op.batch_alter_table('discount_codes', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_discount_codes_code'), ['code'], unique=True)

    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('phone_number', sa.String(), nullable=True),
    sa.Column('password_hash', sa.String(), nullable=False),
    sa.Column('role', sa.Enum('manager', 'technical_team', 'support_staff', name='userrole'), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('email_verified_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('twofa_enabled', sa.Boolean(), server_default='0', nullable=False),
    sa.Column('twofa_secret', sa.String(length=64), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
    sa.UniqueConstraint('email', name=op.f('uq_users_email'))
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_id'), ['id'], unique=False)

    op.create_table('discount_code_automations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('discount_id', sa.Integer(), nullable=False),
    sa.Column('automation_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['automation_id'], ['automations.id'], name=op.f('fk_discount_code_automations_automation_id_automations'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['discount_id'], ['discount_codes.id'], name=op.f('fk_discount_code_automations_discount_id_discount_codes'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_discount_code_automations')),
    sa.UniqueConstraint('discount_id', 'automation_id', name='uq_discount_automation')
    )
    with op.batch_alter_table('discount_code_automations', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_discount_code_automations_automation_id'), ['automation_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_discount_code_automations_discount_id'), ['discount_id'], unique=False)

    op.create_table('email_verification_tokens',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('token', sa.String(length=128), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('used_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_email_verification_tokens_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_email_verification_tokens'))
    )
    with op.batch_alter_table('email_verification_tokens', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_email_verification_tokens_token'), ['token'], unique=True)
        batch_op.create_index(batch_op.f('ix_email_verification_tokens_user_id'), ['user_id'], unique=False)

    op.create_table('kb_templates',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('automation_id', sa.Integer(), nullable=False),
    sa.Column('category', sa.String(length=255), nullable=True),
    sa.Column('question', sa.String(length=500), nullable=False),
    sa.Column('answer', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['automation_id'], ['automations.id'], name=op.f('fk_kb_templates_automation_id_automations')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_kb_templates'))
    )
    with op.batch_alter_table('kb_templates', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_kb_templates_id'), ['id'], unique=False)

    op.create_table('knowledge_entries',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('client_id', sa.Integer(), nullable=False),
    sa.Column('category', sa.String(), nullable=False),
    sa.Column('answer', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['users.id'], name=op.f('fk_knowledge_entries_client_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_knowledge_entries'))
    )
    with op.batch_alter_table('knowledge_entries', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_knowledge_entries_id'), ['id'], unique=False)

    op.create_table('notifications',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('type', sa.String(length=64), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('body', sa.String(length=2000), nullable=True),
    sa.Column('data', sa.JSON(), nullable=True),
    sa.Column('is_read', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('read_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_notifications_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_notifications'))
    )
    with op.batch_alter_table('notifications', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_notifications_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_notifications_user_id'), ['user_id'], unique=False)

    op.create_table('openai_keys',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('automation_id', sa.Integer(), nullable=False),
    sa.Column('alias', sa.String(length=100), nullable=False),
    sa.Column('key_encrypted', sa.Text(), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'DISABLED', 'EXHAUSTED', 'ERROR', name='openaikeystatus'), nullable=False),
    sa.Column('rpm_limit', sa.Integer(), nullable=True),
    sa.Column('daily_token_limit', sa.BigInteger(), nullable=True),
    sa.Column('used_requests_minute', sa.Integer(), nullable=True),
    sa.Column('used_tokens_today', sa.BigInteger(), nullable=True),
    sa.Column('last_minute_window', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('failure_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['automation_id'], ['automations.id'], name=op.f('fk_openai_keys_automation_id_automations')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_openai_keys'))
    )
    with op.batch_alter_table('openai_keys', schema=None) as batch_op:
        batch_op.create_index('idx_openai_keys_automation_status', ['automation_id', 'status'], unique=False)
        batch_op.create_index(batch_op.f('ix_openai_keys_id'), ['id'], unique=False)

    op.create_table('password_reset_tokens',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('token', sa.String(length=255), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_password_reset_tokens_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_password_reset_tokens'))
    )
    with op.batch_alter_table('password_reset_tokens', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_password_reset_tokens_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_password_reset_tokens_token'), ['token'], unique=True)

    op.create_table('payments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('automation_id', sa.Integer(), nullable=False),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.Column('tokens_purchased', sa.Integer(), nullable=False),
    sa.Column('method', sa.String(), nullable=False),
    sa.Column('gateway', sa.String(), nullable=False),
    sa.Column('transaction_id', sa.String(), nullable=False),
    sa.Column('authority', sa.Text(), nullable=True),
    sa.Column('ref_id', sa.Text(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('discount_code', sa.String(length=64), nullable=True),
    sa.Column('discount_percent', sa.Integer(), nullable=True),
    sa.Column('meta', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['automation_id'], ['automations.id'], name=op.f('fk_payments_automation_id_automations')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_payments_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_payments')),
    sa.UniqueConstraint('transaction_id', name=op.f('uq_payments_transaction_id'))
    )
    with op.batch_alter_table('payments', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_payments_authority'), ['authority'], unique=False)
        batch_op.create_index(batch_op.f('ix_payments_id'), ['id'], unique=False)

    op.create_table('sessions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('refresh_token_hash', sa.Text(), nullable=False),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('ip_address', sa.Text(), nullable=True),
    sa.Column('last_used_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('revoked_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_sessions_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_sessions'))
    )
    with op.batch_alter_table('sessions', schema=None) as batch_op:
        batch_op.create_index('idx_session_expiry', ['expires_at', 'revoked_at'], unique=False)
        batch_op.create_index('idx_user_active_sessions', ['user_id', 'revoked_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_sessions_expires_at'), ['expires_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_sessions_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_sessions_last_used_at'), ['last_used_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_sessions_refresh_token_hash'), ['refresh_token_hash'], unique=False)
        batch_op.create_index(batch_op.f('ix_sessions_user_id'), ['user_id'], unique=False)

    op.create_table('tickets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('subject', sa.String(length=255), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('status', sa.Enum('OPEN', 'PENDING', 'RESOLVED', name='ticketstatus'), nullable=False),
    sa.Column('importance', sa.Enum('LOW', 'MEDIUM', 'IMMEDIATE', name='ticketimportance'), nullable=False),
    sa.Column('assigned_to', sa.Integer(), nullable=True),
    sa.Column('attachment_path', sa.String(length=512), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['assigned_to'], ['users.id'], name=op.f('fk_tickets_assigned_to_users')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_tickets_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_tickets'))
    )
    with op.batch_alter_table('tickets', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_tickets_id'), ['id'], unique=False)

    op.create_table('twofactor_recovery_codes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('code_hash', sa.String(length=128), nullable=False),
    sa.Column('used_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_twofactor_recovery_codes_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_twofactor_recovery_codes'))
    )
    with op.batch_alter_table('twofactor_recovery_codes', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_twofactor_recovery_codes_code_hash'), ['code_hash'], unique=False)
        batch_op.create_index(batch_op.f('ix_twofactor_recovery_codes_user_id'), ['user_id'], unique=False)

    op.create_table('user_automations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('automation_id', sa.Integer(), nullable=False),
    sa.Column('telegram_bot_token', sa.String(), nullable=True),
    sa.Column('tokens_remaining', sa.Integer(), nullable=True),
    sa.Column('demo_tokens', sa.Integer(), nullable=True),
    sa.Column('is_demo_active', sa.Boolean(), nullable=True),
    sa.Column('demo_expired', sa.Boolean(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('provisioned_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('integration_status', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['automation_id'], ['automations.id'], name=op.f('fk_user_automations_automation_id_automations')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_user_automations_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_automations')),
    sa.UniqueConstraint('telegram_bot_token', name='uq_telegram_bot_token')
    )
    with op.batch_alter_table('user_automations', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_user_automations_id'), ['id'], unique=False)

    op.create_table('discount_redemptions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('discount_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('automation_id', sa.Integer(), nullable=True),
    sa.Column('payment_id', sa.Integer(), nullable=True),
    sa.Column('code', sa.String(length=64), nullable=False),
    sa.Column('amount_before', sa.Integer(), nullable=False),
    sa.Column('amount_discount', sa.Integer(), nullable=False),
    sa.Column('amount_after', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['automation_id'], ['automations.id'], name=op.f('fk_discount_redemptions_automation_id_automations'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['discount_id'], ['discount_codes.id'], name=op.f('fk_discount_redemptions_discount_id_discount_codes'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['payment_id'], ['payments.id'], name=op.f('fk_discount_redemptions_payment_id_payments'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_discount_redemptions_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_discount_redemptions'))
    )
    with op.batch_alter_table('discount_redemptions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_discount_redemptions_automation_id'), ['automation_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_discount_redemptions_discount_id'), ['discount_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_discount_redemptions_payment_id'), ['payment_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_discount_redemptions_user_id'), ['user_id'], unique=False)

    op.create_table('fallback_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_automation_id', sa.Integer(), nullable=False),
    sa.Column('message', sa.String(), nullable=False),
    sa.Column('error_type', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['user_automation_id'], ['user_automations.id'], name=op.f('fk_fallback_logs_user_automation_id_user_automations')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_fallback_logs'))
    )
    with op.batch_alter_table('fallback_logs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_fallback_logs_id'), ['id'], unique=False)

    op.create_table('kb_status_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('user_automation_id', sa.Integer(), nullable=False),
    sa.Column('automation_id', sa.Integer(), nullable=False),
    sa.Column('kb_health', sa.String(), nullable=False),
    sa.Column('backup_status', sa.Boolean(), nullable=False),
    sa.Column('error_logs', sa.JSON(), nullable=True),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['automation_id'], ['automations.id'], name=op.f('fk_kb_status_history_automation_id_automations')),
    sa.ForeignKeyConstraint(['user_automation_id'], ['user_automations.id'], name=op.f('fk_kb_status_history_user_automation_id_user_automations')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_kb_status_history_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_kb_status_history'))
    )
    with op.batch_alter_table('kb_status_history', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_kb_status_history_id'), ['id'], unique=False)

    op.create_table('openai_key_usage',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('openai_key_id', sa.Integer(), nullable=False),
    sa.Column('automation_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('model', sa.String(length=100), nullable=False),
    sa.Column('prompt_tokens', sa.Integer(), nullable=False),
    sa.Column('completion_tokens', sa.Integer(), nullable=False),
    sa.Column('total_tokens', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('OK', 'FAIL', name='usagestatus'), nullable=False),
    sa.Column('error_code', sa.String(length=50), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['automation_id'], ['automations.id'], name=op.f('fk_openai_key_usage_automation_id_automations')),
    sa.ForeignKeyConstraint(['openai_key_id'], ['openai_keys.id'], name=op.f('fk_openai_key_usage_openai_key_id_openai_keys')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_openai_key_usage_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_openai_key_usage'))
    )
    with op.batch_alter_table('openai_key_usage', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_openai_key_usage_id'), ['id'], unique=False)

    op.create_table('ticket_messages',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ticket_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('attachment_path', sa.String(length=512), nullable=True),
    sa.Column('is_internal', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['ticket_id'], ['tickets.id'], name=op.f('fk_ticket_messages_ticket_id_tickets')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_ticket_messages_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_ticket_messages'))
    )
    with op.batch_alter_table('ticket_messages', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_ticket_messages_id'), ['id'], unique=False)

    op.create_table('token_adjustments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('user_automation_id', sa.Integer(), nullable=False),
    sa.Column('admin_id', sa.Integer(), nullable=False),
    sa.Column('delta_tokens', sa.Integer(), nullable=False),
    sa.Column('reason', sa.String(length=255), nullable=False),
    sa.Column('note', sa.Text(), nullable=True),
    sa.Column('related_payment_id', sa.Integer(), nullable=True),
    sa.Column('idempotency_key', sa.String(length=64), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['admin_id'], ['users.id'], name=op.f('fk_token_adjustments_admin_id_users')),
    sa.ForeignKeyConstraint(['related_payment_id'], ['payments.id'], name=op.f('fk_token_adjustments_related_payment_id_payments')),
    sa.ForeignKeyConstraint(['user_automation_id'], ['user_automations.id'], name=op.f('fk_token_adjustments_user_automation_id_user_automations')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_token_adjustments_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_token_adjustments')),
    sa.UniqueConstraint('idempotency_key', name='uq_idempotency_key')
    )
    with op.batch_alter_table('token_adjustments', schema=None) as batch_op:
        batch_op.create_index('idx_user_automation_created', ['user_id', 'user_automation_id', 'created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_token_adjustments_admin_id'), ['admin_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_token_adjustments_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_token_adjustments_idempotency_key'), ['idempotency_key'], unique=True)
        batch_op.create_index(batch_op.f('ix_token_adjustments_related_payment_id'), ['related_payment_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_token_adjustments_user_automation_id'), ['user_automation_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_token_adjustments_user_id'), ['user_id'], unique=False)

    op.create_table('token_usages',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_automation_id', sa.Integer(), nullable=False),
    sa.Column('tokens_used', sa.Integer(), nullable=False),
    sa.Column('usage_type', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['user_automation_id'], ['user_automations.id'], name=op.f('fk_token_usages_user_automation_id_user_automations')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_token_usages'))
    )
    with op.batch_alter_table('token_usages', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_token_usages_id'), ['id'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('token_usages', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_token_usages_id'))

    op.drop_table('token_usages')
    with op.batch_alter_table('token_adjustments', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_token_adjustments_user_id'))
        batch_op.drop_index(batch_op.f('ix_token_adjustments_user_automation_id'))
        batch_op.drop_index(batch_op.f('ix_token_adjustments_related_payment_id'))
        batch_op.drop_index(batch_op.f('ix_token_adjustments_idempotency_key'))
        batch_op.drop_index(batch_op.f('ix_token_adjustments_id'))
        batch_op.drop_index(batch_op.f('ix_token_adjustments_admin_id'))
        batch_op.drop_index('idx_user_automation_created')

    op.drop_table('token_adjustments')
    with op.batch_alter_table('ticket_messages', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_ticket_messages_id'))

    op.drop_table('ticket_messages')
    with op.batch_alter_table('openai_key_usage', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_openai_key_usage_id'))

    op.drop_table('openai_key_usage')
    with op.batch_alter_table('kb_status_history', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_kb_status_history_id'))

    op.drop_table('kb_status_history')
    with op.batch_alter_table('fallback_logs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_fallback_logs_id'))

    op.drop_table('fallback_logs')
    with op.batch_alter_table('discount_redemptions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_discount_redemptions_user_id'))
        batch_op.drop_index(batch_op.f('ix_discount_redemptions_payment_id'))
        batch_op.drop_index(batch_op.f('ix_discount_redemptions_discount_id'))
        batch_op.drop_index(batch_op.f('ix_discount_redemptions_automation_id'))

    op.drop_table('discount_redemptions')
    with op.batch_alter_table('user_automations', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_automations_id'))

    op.drop_table('user_automations')
    with op.batch_alter_table('twofactor_recovery_codes', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_twofactor_recovery_codes_user_id'))
        batch_op.drop_index(batch_op.f('ix_twofactor_recovery_codes_code_hash'))

    op.drop_table('twofactor_recovery_codes')
    with op.batch_alter_table('tickets', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_tickets_id'))

    op.drop_table('tickets')
    with op.batch_alter_table('sessions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_sessions_user_id'))
        batch_op.drop_index(batch_op.f('ix_sessions_refresh_token_hash'))
        batch_op.drop_index(batch_op.f('ix_sessions_last_used_at'))
        batch_op.drop_index(batch_op.f('ix_sessions_id'))
        batch_op.drop_index(batch_op.f('ix_sessions_expires_at'))
        batch_op.drop_index('idx_user_active_sessions')
        batch_op.drop_index('idx_session_expiry')

    op.drop_table('sessions')
    with op.batch_alter_table('payments', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_payments_id'))
        batch_op.drop_index(batch_op.f('ix_payments_authority'))

    op.drop_table('payments')
    with op.batch_alter_table('password_reset_tokens', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_password_reset_tokens_token'))
        batch_op.drop_index(batch_op.f('ix_password_reset_tokens_id'))

    op.drop_table('password_reset_tokens')
    with op.batch_alter_table('openai_keys', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_openai_keys_id'))
        batch_op.drop_index('idx_openai_keys_automation_status')

    op.drop_table('openai_keys')
    with op.batch_alter_table('notifications', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_notifications_user_id'))
        batch_op.drop_index(batch_op.f('ix_notifications_id'))

    op.drop_table('notifications')
    with op.batch_alter_table('knowledge_entries', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_knowledge_entries_id'))

    op.drop_table('knowledge_entries')
    with op.batch_alter_table('kb_templates', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_kb_templates_id'))

    op.drop_table('kb_templates')
    with op.batch_alter_table('email_verification_tokens', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_email_verification_tokens_user_id'))
        batch_op.drop_index(batch_op.f('ix_email_verification_tokens_token'))

    op.drop_table('email_verification_tokens')
    with op.batch_alter_table('discount_code_automations', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_discount_code_automations_discount_id'))
        batch_op.drop_index(batch_op.f('ix_discount_code_automations_automation_id'))

    op.drop_table('discount_code_automations')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_id'))

    op.drop_table('users')
    with op.batch_alter_table('discount_codes', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_discount_codes_code'))

    op.drop_table('discount_codes')
    with op.batch_alter_table('backup_logs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_backup_logs_id'))

    op.drop_table('backup_logs')
    with op.batch_alter_table('automations', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_automations_is_listed'))
        batch_op.drop_index(batch_op.f('ix_automations_id'))
        batch_op.drop_index(batch_op.f('ix_automations_health_status'))

    op.drop_table('automations')
    # ### end Alembic commands ###
